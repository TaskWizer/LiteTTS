{
  "optimization_timestamp": 1756356122.4780192,
  "target_memory_mb": 150,
  "optimization_config": {
    "enable_pre_allocation": true,
    "pre_allocation_size_mb": 32,
    "enable_memory_pooling": true,
    "pool_size_mb": 16,
    "enable_aggressive_gc": true,
    "gc_threshold_mb": 15,
    "enable_memory_mapping": true,
    "cache_size_limit_mb": 64,
    "enable_lazy_loading": true,
    "memory_monitoring_interval": 1.0
  },
  "baseline_profile": {
    "total_memory_mb": 31852.31640625,
    "available_memory_mb": 18517.06640625,
    "used_memory_mb": 11767.00390625,
    "process_memory_mb": 67.7265625,
    "process_memory_percent": 0.21262680439376405,
    "peak_memory_mb": 67.7265625,
    "memory_growth_mb": 0.625,
    "gc_collections": {
      "generation_0": 428,
      "generation_1": 1,
      "generation_2": 1
    },
    "largest_objects": [
      {
        "size_mb": 0.5766506195068359,
        "count": 6551,
        "filename": "    lines = fp.readlines()"
      },
      {
        "size_mb": 0.00323486328125,
        "count": 53,
        "filename": "    return (self.size, self.count, self.traceback)"
      },
      {
        "size_mb": 0.00274658203125,
        "count": 60,
        "filename": "    self._frames = tuple(reversed(frames))"
      },
      {
        "size_mb": 0.00092315673828125,
        "count": 4,
        "filename": "    return _sre.compile("
      },
      {
        "size_mb": 0.00072479248046875,
        "count": 2,
        "filename": "    self.system_metrics: deque = deque(maxlen=max_history)"
      },
      {
        "size_mb": 0.00072479248046875,
        "count": 2,
        "filename": "    self.tts_metrics: deque = deque(maxlen=max_history)"
      },
      {
        "size_mb": 0.00072479248046875,
        "count": 2,
        "filename": "    self.metrics: deque = deque(maxlen=max_history)"
      },
      {
        "size_mb": 0.00072479248046875,
        "count": 2,
        "filename": "    self._waiters = _deque()"
      },
      {
        "size_mb": 0.00063323974609375,
        "count": 2,
        "filename": "    next_f = f.f_back"
      },
      {
        "size_mb": 0.000457763671875,
        "count": 3,
        "filename": "    is_enabled = self._cache[level] = ("
      }
    ]
  },
  "final_profile": {
    "total_memory_mb": 31852.31640625,
    "available_memory_mb": 18451.12109375,
    "used_memory_mb": 11833.95703125,
    "process_memory_mb": 91.3203125,
    "process_memory_percent": 0.28669912522306007,
    "peak_memory_mb": 91.3203125,
    "memory_growth_mb": 24.21875,
    "gc_collections": {
      "generation_0": 5,
      "generation_1": 6,
      "generation_2": 2
    },
    "largest_objects": [
      {
        "size_mb": 21.000163078308105,
        "count": 6,
        "filename": "    buffer = bytearray(size)"
      },
      {
        "size_mb": 0.6721639633178711,
        "count": 7667,
        "filename": "    lines = fp.readlines()"
      },
      {
        "size_mb": 0.00640869140625,
        "count": 105,
        "filename": "    return (self.size, self.count, self.traceback)"
      },
      {
        "size_mb": 0.0063629150390625,
        "count": 63,
        "filename": "    largest_objects.append({"
      },
      {
        "size_mb": 0.00360870361328125,
        "count": 78,
        "filename": "    traces = _get_traces()"
      },
      {
        "size_mb": 0.0023345947265625,
        "count": 51,
        "filename": "    self._frames = tuple(reversed(frames))"
      },
      {
        "size_mb": 0.00200653076171875,
        "count": 29,
        "filename": "    self.memory_history.append({"
      },
      {
        "size_mb": 0.00154876708984375,
        "count": 29,
        "filename": "    lines = []"
      },
      {
        "size_mb": 0.0014495849609375,
        "count": 4,
        "filename": "    self._waiters = _deque()"
      },
      {
        "size_mb": 0.00092315673828125,
        "count": 4,
        "filename": "    return _sre.compile("
      }
    ]
  },
  "memory_improvement": {
    "baseline_memory_mb": 67.7265625,
    "final_memory_mb": 91.3203125,
    "memory_change_mb": 23.59375,
    "target_achieved": true
  },
  "pre_allocation_success": true,
  "cache_configuration": {
    "voice_cache": {
      "enabled": true,
      "max_size_mb": 16,
      "ttl_seconds": 3600,
      "eviction_policy": "lru"
    },
    "model_cache": {
      "enabled": true,
      "max_size_mb": 32,
      "ttl_seconds": 7200,
      "eviction_policy": "lru"
    },
    "text_processing_cache": {
      "enabled": true,
      "max_size_mb": 8,
      "ttl_seconds": 1800,
      "eviction_policy": "lru"
    },
    "audio_cache": {
      "enabled": true,
      "max_size_mb": 8,
      "ttl_seconds": 900,
      "eviction_policy": "lru"
    }
  },
  "monitoring_statistics": {
    "duration_seconds": 29.318883895874023,
    "samples_collected": 30,
    "min_memory_mb": 89.9140625,
    "max_memory_mb": 91.3203125,
    "avg_memory_mb": 91.24739583333333,
    "memory_variance": 0.0744357638888889,
    "peak_growth_mb": 1.40625
  },
  "leak_analysis": {
    "memory_growth_mb": 0.9375,
    "monitoring_duration": 30,
    "potential_leaks": [],
    "top_memory_increases": []
  },
  "recommendations": [
    "Memory target achieved with 126.4MB headroom"
  ]
}