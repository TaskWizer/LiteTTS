{
  "optimization_timestamp": 1756428264.8120835,
  "target_memory_mb": 150,
  "optimization_config": {
    "enable_pre_allocation": true,
    "pre_allocation_size_mb": 32,
    "enable_memory_pooling": true,
    "pool_size_mb": 16,
    "enable_aggressive_gc": true,
    "gc_threshold_mb": 15,
    "enable_memory_mapping": true,
    "cache_size_limit_mb": 64,
    "enable_lazy_loading": true,
    "memory_monitoring_interval": 1.0
  },
  "baseline_profile": {
    "total_memory_mb": 31852.31640625,
    "available_memory_mb": 13838.890625,
    "used_memory_mb": 16315.6953125,
    "process_memory_mb": 1542.01953125,
    "process_memory_percent": 4.8411535022533805,
    "peak_memory_mb": 1542.01953125,
    "memory_growth_mb": 136.61328125,
    "gc_collections": {
      "generation_0": 9,
      "generation_1": 1,
      "generation_2": 4
    },
    "largest_objects": [
      {
        "size_mb": 27.5283784866333,
        "count": 619856,
        "filename": "    obj, end = self.scan_once(s, idx)"
      },
      {
        "size_mb": 25.833632469177246,
        "count": 377955,
        "filename": "    entries[word.lower()] = DictionaryEntry("
      },
      {
        "size_mb": 20.01732635498047,
        "count": 252105,
        "filename": "    entries[word] = DictionaryEntry("
      },
      {
        "size_mb": 6.959711074829102,
        "count": 126007,
        "filename": "    phonemes = ' '.join(parts[1:])"
      },
      {
        "size_mb": 6.505257606506348,
        "count": 57161,
        "filename": "  File \"<frozen importlib._bootstrap_external>\", line 757"
      },
      {
        "size_mb": 5.82902717590332,
        "count": 126052,
        "filename": "    word = parts[0].lower()"
      },
      {
        "size_mb": 5.825743675231934,
        "count": 125984,
        "filename": "    word=word.lower(),"
      },
      {
        "size_mb": 2.88482666015625,
        "count": 126040,
        "filename": "    base_freq = 1.0 / (len(word) + 1)"
      },
      {
        "size_mb": 0.9964494705200195,
        "count": 8,
        "filename": "    voice_data = np.fromfile(voice_file, dtype=np.float32)"
      },
      {
        "size_mb": 0.45416736602783203,
        "count": 5385,
        "filename": "  File \"<frozen importlib._bootstrap>\", line 488"
      }
    ]
  },
  "final_profile": {
    "total_memory_mb": 31852.31640625,
    "available_memory_mb": 13182.82421875,
    "used_memory_mb": 16971.47265625,
    "process_memory_mb": 1810.94921875,
    "process_memory_percent": 5.685455323414592,
    "peak_memory_mb": 1810.94921875,
    "memory_growth_mb": 405.54296875,
    "gc_collections": {
      "generation_0": 68,
      "generation_1": 9,
      "generation_2": 6
    },
    "largest_objects": [
      {
        "size_mb": 27.5283784866333,
        "count": 619856,
        "filename": "    obj, end = self.scan_once(s, idx)"
      },
      {
        "size_mb": 25.833632469177246,
        "count": 377955,
        "filename": "    entries[word.lower()] = DictionaryEntry("
      },
      {
        "size_mb": 21.000163078308105,
        "count": 6,
        "filename": "    buffer = bytearray(size)"
      },
      {
        "size_mb": 20.01732635498047,
        "count": 252105,
        "filename": "    entries[word] = DictionaryEntry("
      },
      {
        "size_mb": 6.959711074829102,
        "count": 126007,
        "filename": "    phonemes = ' '.join(parts[1:])"
      },
      {
        "size_mb": 6.505257606506348,
        "count": 57161,
        "filename": "  File \"<frozen importlib._bootstrap_external>\", line 757"
      },
      {
        "size_mb": 5.82902717590332,
        "count": 126052,
        "filename": "    word = parts[0].lower()"
      },
      {
        "size_mb": 5.825743675231934,
        "count": 125984,
        "filename": "    word=word.lower(),"
      },
      {
        "size_mb": 2.88482666015625,
        "count": 126040,
        "filename": "    base_freq = 1.0 / (len(word) + 1)"
      },
      {
        "size_mb": 0.9964494705200195,
        "count": 8,
        "filename": "    voice_data = np.fromfile(voice_file, dtype=np.float32)"
      }
    ]
  },
  "memory_improvement": {
    "baseline_memory_mb": 1542.01953125,
    "final_memory_mb": 1810.94921875,
    "memory_change_mb": 268.9296875,
    "target_achieved": false
  },
  "pre_allocation_success": true,
  "cache_configuration": {
    "voice_cache": {
      "enabled": true,
      "max_size_mb": 16,
      "ttl_seconds": 3600,
      "eviction_policy": "lru"
    },
    "model_cache": {
      "enabled": true,
      "max_size_mb": 32,
      "ttl_seconds": 7200,
      "eviction_policy": "lru"
    },
    "text_processing_cache": {
      "enabled": true,
      "max_size_mb": 8,
      "ttl_seconds": 1800,
      "eviction_policy": "lru"
    },
    "audio_cache": {
      "enabled": true,
      "max_size_mb": 8,
      "ttl_seconds": 900,
      "eviction_policy": "lru"
    }
  },
  "monitoring_statistics": {
    "duration_seconds": 28.73344326019287,
    "samples_collected": 9,
    "min_memory_mb": 1570.82421875,
    "max_memory_mb": 1809.6796875,
    "avg_memory_mb": 1752.9188368055557,
    "memory_variance": 4419.077713954596,
    "peak_growth_mb": 238.85546875
  },
  "leak_analysis": {
    "memory_growth_mb": 203.66015625,
    "monitoring_duration": 30,
    "potential_leaks": [
      "Significant memory growth detected"
    ],
    "top_memory_increases": []
  },
  "recommendations": [
    "Memory usage exceeded target by 118.9MB",
    "Consider reducing cache sizes or implementing more aggressive optimization",
    "High memory growth detected - investigate potential memory leaks",
    "High GC activity - consider optimizing object allocation patterns"
  ]
}