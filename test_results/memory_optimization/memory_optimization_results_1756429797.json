{
  "optimization_timestamp": 1756429797.1949697,
  "target_memory_mb": 150,
  "optimization_config": {
    "enable_pre_allocation": true,
    "pre_allocation_size_mb": 32,
    "enable_memory_pooling": true,
    "pool_size_mb": 16,
    "enable_aggressive_gc": true,
    "gc_threshold_mb": 15,
    "enable_memory_mapping": true,
    "cache_size_limit_mb": 64,
    "enable_lazy_loading": true,
    "memory_monitoring_interval": 1.0
  },
  "baseline_profile": {
    "total_memory_mb": 31852.31640625,
    "available_memory_mb": 12508.42578125,
    "used_memory_mb": 17628.6796875,
    "process_memory_mb": 530.25,
    "process_memory_percent": 1.6647140924920467,
    "peak_memory_mb": 530.25,
    "memory_growth_mb": 0.78125,
    "gc_collections": {
      "generation_0": 106,
      "generation_1": 5,
      "generation_2": 10
    },
    "largest_objects": [
      {
        "size_mb": 0.37790393829345703,
        "count": 4273,
        "filename": "    lines = fp.readlines()"
      },
      {
        "size_mb": 0.0044097900390625,
        "count": 1,
        "filename": "  File \"<frozen os>\", line 721"
      },
      {
        "size_mb": 0.0028076171875,
        "count": 46,
        "filename": "    return (self.size, self.count, self.traceback)"
      },
      {
        "size_mb": 0.002105712890625,
        "count": 46,
        "filename": "    self._frames = tuple(reversed(frames))"
      },
      {
        "size_mb": 0.0017786026000976562,
        "count": 41,
        "filename": "  File \"<frozen os>\", line 794"
      },
      {
        "size_mb": 0.001007080078125,
        "count": 5,
        "filename": "    cache[filename] = size, mtime, lines, fullname"
      },
      {
        "size_mb": 0.00072479248046875,
        "count": 2,
        "filename": "    self.system_metrics: deque = deque(maxlen=max_history)"
      },
      {
        "size_mb": 0.00072479248046875,
        "count": 2,
        "filename": "    self.tts_metrics: deque = deque(maxlen=max_history)"
      },
      {
        "size_mb": 0.00072479248046875,
        "count": 2,
        "filename": "    self.metrics: deque = deque(maxlen=max_history)"
      },
      {
        "size_mb": 0.00072479248046875,
        "count": 2,
        "filename": "    self._waiters = _deque()"
      }
    ]
  },
  "final_profile": {
    "total_memory_mb": 31852.31640625,
    "available_memory_mb": 12525.41015625,
    "used_memory_mb": 17618.1484375,
    "process_memory_mb": 553.0625,
    "process_memory_percent": 1.736333687466068,
    "peak_memory_mb": 553.0625,
    "memory_growth_mb": 23.59375,
    "gc_collections": {
      "generation_0": 5,
      "generation_1": 6,
      "generation_2": 2
    },
    "largest_objects": [
      {
        "size_mb": 21.000163078308105,
        "count": 6,
        "filename": "    buffer = bytearray(size)"
      },
      {
        "size_mb": 0.43074512481689453,
        "count": 4893,
        "filename": "    lines = fp.readlines()"
      },
      {
        "size_mb": 0.00664520263671875,
        "count": 65,
        "filename": "    largest_objects.append({"
      },
      {
        "size_mb": 0.00592041015625,
        "count": 97,
        "filename": "    return (self.size, self.count, self.traceback)"
      },
      {
        "size_mb": 0.0044097900390625,
        "count": 1,
        "filename": "  File \"<frozen os>\", line 721"
      },
      {
        "size_mb": 0.0033721923828125,
        "count": 73,
        "filename": "    traces = _get_traces()"
      },
      {
        "size_mb": 0.002197265625,
        "count": 48,
        "filename": "    self._frames = tuple(reversed(frames))"
      },
      {
        "size_mb": 0.00206756591796875,
        "count": 30,
        "filename": "    self.memory_history.append({"
      },
      {
        "size_mb": 0.0017786026000976562,
        "count": 41,
        "filename": "  File \"<frozen os>\", line 794"
      },
      {
        "size_mb": 0.00154876708984375,
        "count": 29,
        "filename": "    return []"
      }
    ]
  },
  "memory_improvement": {
    "baseline_memory_mb": 530.25,
    "final_memory_mb": 553.0625,
    "memory_change_mb": 22.8125,
    "target_achieved": true
  },
  "pre_allocation_success": true,
  "cache_configuration": {
    "voice_cache": {
      "enabled": true,
      "max_size_mb": 16,
      "ttl_seconds": 3600,
      "eviction_policy": "lru"
    },
    "model_cache": {
      "enabled": true,
      "max_size_mb": 32,
      "ttl_seconds": 7200,
      "eviction_policy": "lru"
    },
    "text_processing_cache": {
      "enabled": true,
      "max_size_mb": 8,
      "ttl_seconds": 1800,
      "eviction_policy": "lru"
    },
    "audio_cache": {
      "enabled": true,
      "max_size_mb": 8,
      "ttl_seconds": 900,
      "eviction_policy": "lru"
    }
  },
  "monitoring_statistics": {
    "duration_seconds": 29.213810205459595,
    "samples_collected": 30,
    "min_memory_mb": 552.125,
    "max_memory_mb": 552.90625,
    "avg_memory_mb": 552.875,
    "memory_variance": 0.020182291666666668,
    "peak_growth_mb": 0.78125
  },
  "leak_analysis": {
    "memory_growth_mb": 0.46875,
    "monitoring_duration": 30,
    "potential_leaks": [],
    "top_memory_increases": []
  },
  "recommendations": [
    "Memory target achieved with 127.2MB headroom"
  ]
}