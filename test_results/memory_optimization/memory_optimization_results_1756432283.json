{
  "optimization_timestamp": 1756432283.4445148,
  "target_memory_mb": 150,
  "optimization_config": {
    "enable_pre_allocation": true,
    "pre_allocation_size_mb": 32,
    "enable_memory_pooling": true,
    "pool_size_mb": 16,
    "enable_aggressive_gc": true,
    "gc_threshold_mb": 15,
    "enable_memory_mapping": true,
    "cache_size_limit_mb": 64,
    "enable_lazy_loading": true,
    "memory_monitoring_interval": 1.0
  },
  "baseline_profile": {
    "total_memory_mb": 31852.31640625,
    "available_memory_mb": 14192.62109375,
    "used_memory_mb": 15959.72265625,
    "process_memory_mb": 531.1875,
    "process_memory_percent": 1.6676573635183762,
    "peak_memory_mb": 531.1875,
    "memory_growth_mb": 0.46875,
    "gc_collections": {
      "generation_0": 127,
      "generation_1": 5,
      "generation_2": 10
    },
    "largest_objects": [
      {
        "size_mb": 0.4696617126464844,
        "count": 5337,
        "filename": "    lines = fp.readlines()"
      },
      {
        "size_mb": 0.00881195068359375,
        "count": 1,
        "filename": "    _cache2[key] = p"
      },
      {
        "size_mb": 0.00881195068359375,
        "count": 1,
        "filename": "    _cache[key] = p"
      },
      {
        "size_mb": 0.00360107421875,
        "count": 59,
        "filename": "    return (self.size, self.count, self.traceback)"
      },
      {
        "size_mb": 0.0025634765625,
        "count": 56,
        "filename": "    self._frames = tuple(reversed(frames))"
      },
      {
        "size_mb": 0.0011444091796875,
        "count": 7,
        "filename": "    cache[filename] = size, mtime, lines, fullname"
      },
      {
        "size_mb": 0.00084686279296875,
        "count": 3,
        "filename": "    next_f = f.f_back"
      },
      {
        "size_mb": 0.00072479248046875,
        "count": 2,
        "filename": "    self.system_metrics: deque = deque(maxlen=max_history)"
      },
      {
        "size_mb": 0.00072479248046875,
        "count": 2,
        "filename": "    self.tts_metrics: deque = deque(maxlen=max_history)"
      },
      {
        "size_mb": 0.00072479248046875,
        "count": 2,
        "filename": "    self.metrics: deque = deque(maxlen=max_history)"
      }
    ]
  },
  "final_profile": {
    "total_memory_mb": 31852.31640625,
    "available_memory_mb": 14117.1171875,
    "used_memory_mb": 16036.5546875,
    "process_memory_mb": 554.15625,
    "process_memory_percent": 1.7397675036634526,
    "peak_memory_mb": 554.15625,
    "memory_growth_mb": 23.4375,
    "gc_collections": {
      "generation_0": 5,
      "generation_1": 5,
      "generation_2": 2
    },
    "largest_objects": [
      {
        "size_mb": 21.000163078308105,
        "count": 6,
        "filename": "    buffer = bytearray(size)"
      },
      {
        "size_mb": 0.5225028991699219,
        "count": 5957,
        "filename": "    lines = fp.readlines()"
      },
      {
        "size_mb": 0.00881195068359375,
        "count": 1,
        "filename": "    _cache2[key] = p"
      },
      {
        "size_mb": 0.00881195068359375,
        "count": 1,
        "filename": "    _cache[key] = p"
      },
      {
        "size_mb": 0.00653076171875,
        "count": 107,
        "filename": "    return (self.size, self.count, self.traceback)"
      },
      {
        "size_mb": 0.00624847412109375,
        "count": 62,
        "filename": "    largest_objects.append({"
      },
      {
        "size_mb": 0.00333404541015625,
        "count": 72,
        "filename": "    traces = _get_traces()"
      },
      {
        "size_mb": 0.002197265625,
        "count": 48,
        "filename": "    self._frames = tuple(reversed(frames))"
      },
      {
        "size_mb": 0.00170135498046875,
        "count": 24,
        "filename": "    self.memory_history.append({"
      },
      {
        "size_mb": 0.00154876708984375,
        "count": 29,
        "filename": "    lines = []"
      }
    ]
  },
  "memory_improvement": {
    "baseline_memory_mb": 531.1875,
    "final_memory_mb": 554.15625,
    "memory_change_mb": 22.96875,
    "target_achieved": true
  },
  "pre_allocation_success": true,
  "cache_configuration": {
    "voice_cache": {
      "enabled": true,
      "max_size_mb": 16,
      "ttl_seconds": 3600,
      "eviction_policy": "lru"
    },
    "model_cache": {
      "enabled": true,
      "max_size_mb": 32,
      "ttl_seconds": 7200,
      "eviction_policy": "lru"
    },
    "text_processing_cache": {
      "enabled": true,
      "max_size_mb": 8,
      "ttl_seconds": 1800,
      "eviction_policy": "lru"
    },
    "audio_cache": {
      "enabled": true,
      "max_size_mb": 8,
      "ttl_seconds": 900,
      "eviction_policy": "lru"
    }
  },
  "monitoring_statistics": {
    "duration_seconds": 29.325281381607056,
    "samples_collected": 30,
    "min_memory_mb": 532.28125,
    "max_memory_mb": 554.15625,
    "avg_memory_mb": 553.34375,
    "memory_variance": 15.303385416666666,
    "peak_growth_mb": 21.875
  },
  "leak_analysis": {
    "memory_growth_mb": 0.78125,
    "monitoring_duration": 30,
    "potential_leaks": [],
    "top_memory_increases": []
  },
  "recommendations": [
    "Memory target achieved with 127.0MB headroom"
  ]
}