[project]
name = "kokoro-onnx-tts-api"
version = "1.0.0"
description = "High-quality text-to-speech service with ONNX optimization and OpenWebUI compatibility"
authors = [
    {name = "Kokoro TTS Team", email = "team@kokoro-tts.com"}
]
license = "MIT"
readme = "README.md"
requires-python = ">=3.10"
keywords = ["tts", "text-to-speech", "onnx", "ai", "speech-synthesis"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",

    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",

    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "soundfile>=0.12.0",
    "numpy>=1.24.0",
    "kokoro-onnx>=0.4.9",
    "onnxruntime>=1.22.1",
    "pydantic>=2.0.0",
    "psutil>=5.9.0",
    "requests>=2.31.0",
    "jinja2>=3.1.6",
    "mutagen>=1.47.0",
    "watchdog>=6.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "pylint>=2.17.0",
    "mypy>=1.3.0",
    "bandit>=1.7.5",
    "pre-commit>=3.3.0",
]
watermarking = [
    "resemble-perth>=1.0.0",
]
gpu = [
    "onnxruntime-gpu>=1.22.0",
]

[project.urls]
Homepage = "https://github.com/aliasfoxkde/kokoro_onnx_tts_api"
Documentation = "https://github.com/aliasfoxkde/kokoro_onnx_tts_api/blob/main/README.md"
Repository = "https://github.com/aliasfoxkde/kokoro_onnx_tts_api"
Issues = "https://github.com/aliasfoxkde/kokoro_onnx_tts_api/issues"

[project.scripts]
kokoro-tts = "kokoro.app:main"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."]
include = ["kokoro*"]
exclude = ["tests*", "temp*", "logs*", "cache*", "certs*", "nginx*", "static*", "samples*", "monitoring*", "test_results*", "dictionaries*"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = """
(__pycache__|*.pyc|.git|.pytest_cache|venv|env|build|dist|*.egg-info)
"""

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "kokoro/tests"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

[tool.coverage.run]
source = ["."]
omit = [
    "__pycache__/*", "*.pyc/*", ".git/*", ".pytest_cache/*", "venv/*", "env/*", "build/*", "dist/*", "*.egg-info/*",
    "*/tests/*",
    "*/test_*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true
