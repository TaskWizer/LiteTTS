version: '3.8'

services:
  litetts:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: litetts-production
    restart: unless-stopped
    
    # Resource limits for production
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '2.0'
        reservations:
          memory: 256M
          cpus: '1.0'
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8355/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Environment variables for production
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - MAX_MEMORY_MB=150
      - TARGET_RTF=0.25
      - ENABLE_PERFORMANCE_OPTIMIZATION=true
      - ENABLE_SIMD_OPTIMIZATION=true
      - ENABLE_BATCH_OPTIMIZATION=true
      - BATCH_SIZE_SHORT=16
      - BATCH_SIZE_MEDIUM=8
      - BATCH_SIZE_LONG=4
      - CACHE_SIZE_MB=64
      - ONNX_INTER_OP_THREADS=2
      - ONNX_INTRA_OP_THREADS=4
      - ORT_ENABLE_AVX2=1
      - ORT_MEMORY_LIMIT_MB=64
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    
    # Volumes for persistent data
    volumes:
      - ./data/voices:/app/LiteTTS/models:rw
      - ./data/cache:/app/cache:rw
      - ./logs:/app/logs:rw
      - ./config:/app/config:ro
    
    # Network configuration
    ports:
      - "8355:8355"
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    
    # User configuration (non-root)
    user: "1000:1000"
    
    # Labels for monitoring and management
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.litetts.rule=Host(`tts.yourdomain.com`)"
      - "traefik.http.routers.litetts.tls=true"
      - "traefik.http.routers.litetts.tls.certresolver=letsencrypt"
      - "traefik.http.services.litetts.loadbalancer.server.port=8355"
      - "com.docker.compose.project=litetts-production"
      - "com.docker.compose.service=litetts"

  # Optional: Reverse proxy with SSL termination
  traefik:
    image: traefik:v3.0
    container_name: litetts-traefik
    restart: unless-stopped
    
    command:
      - "--api.dashboard=true"
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=your-email@domain.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--log.level=INFO"
      - "--accesslog=true"
    
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./data/letsencrypt:/letsencrypt:rw
    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.yourdomain.com`)"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.service=api@internal"
    
    depends_on:
      - litetts

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: litetts-prometheus
    restart: unless-stopped
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    
    ports:
      - "9090:9090"
    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.yourdomain.com`)"
      - "traefik.http.routers.prometheus.tls=true"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: litetts-grafana
    restart: unless-stopped
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=your-secure-password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    ports:
      - "3000:3000"
    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.yourdomain.com`)"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
    
    depends_on:
      - prometheus

# Named volumes for persistent data
volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Networks
networks:
  default:
    name: litetts-production
    driver: bridge
